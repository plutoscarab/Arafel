
ARAFEL

Arafel is a pure, semi-lazy, statically-typed functional programming language.
Source files contain comments on non-indented lines and code on indented lines.
You're reading a valid Arafel source file. Files must be encoded in UTF-8 or a
compatible subset of it such as ASCII.


LITERALS

A string of decimal digits is a "nat" value (a natural number). Underscores can
be used as digit separators to make large values more readible. Non-ASCII digits
are allowed.

    0
    500
    1_000_000
    43252003274489856000
    ੨੦੨੨
    𝟞𝟜

Boolean values of type "bool" are shown below. The 𝗙 and 𝗧 characters are
U+1D5D9 and U+1D5E7 Mathematical Sans-Serif Bold Capital.

    false
    true
    𝗙
    𝗧

Strings of text delimited by double-quotes are "str" values.

    "Hello, world!"
    ""


IDENTIFIERS

Identifiers (names used for constants, functions, parameters, etc.) start with a
letter or underscore, and continue with letters, underscores, digits,
apostrophes and primes, and characters in Unicode category "other number"
excluding subscript digits.

Here we define some constant values.

    let foo = false
    let x₁ = 1
    let bar፳ = "bar"
    let prime'′ = 53

The following identifiers are keywords of the language and cannot be used:
"af", "case", "elif", "else", "forall", "if", "let", "of", "then", "type".


OPERATORS

Operators are indicated by sequences of characters in Unicode categories of
other punctuation, dash punctuation, math symbol, and other symbol, but not
including the comma. Operators appear between expressions to form compound
expressions. Some operators:

    x + y
    x * y
    x /%/ y
    x ∆∆ y
    x ∰ y
    3 ⊕⊕ qux ⊕⊕ zorb

FUNCTIONS

Functions are defined like this:

    let alwaysFive(x) = 5

Functions are called like this:

    alwaysFive("yes")

which returns the value 5.

Functions can take multiple parameters.

    let max(a, b) = if a > b then a else b

Operators be used as function names if surrounded by square brackets.

    let [∆∆](x, y) = if x > y then 0 else y - 7

Functions are values that can be passed to other functions. Anonymous functions,
or lambda functions, are defined with "af" which is short for "a function".

    af(x) = floor(sqrt(x))

EXPONENTS

Expressions can be followed by superscript digits. Exponent on a "nat" value
represents the power operation.

    3²

Exponent on a "str" value represent repetition of the string. This is the string
"ababababab":

    "ab"⁵

Exponent on a "bool" value represents false if the value is false and the
exponent is greater than zero. If the exponent is zero or the value is true, the
result is true.

    false³
    false⁰
    true²

Exponent on a single-argument function with a return type that matches the type
of the first parameter represents repeated application of the function. Here is
sqrt(sqrt(sqrt(7))):

    sqrt³(7)

Exponentiation on a function with multiple parameters operates on the
fully-curried version of the function, so the first parameter must be a function
parameter of the same type.

    let foo(f, x) = sqrt(f(x))

is equivalent to

    let foo(f) = af(x) = sqrt(f(x))

so that foo²(f) = foo(foo(f)) = sqrt(foo(f)(x)) = sqrt(sqrt(f(x)))

TAGGED UNIONS 𝑎.𝑘.𝑎. DISCRIMINATED UNIONS 𝑎.𝑘.𝑎. SUM TYPES

Binary tree with data in the leaf nodes:

    type Tree(t) = Leaf(t) | Node(Tree(t), Tree(t))

This defines two different functions for creating trees, one called Leaf that
takes a value and returns a tree with a single leaf node, and one called Node
that returns a tree with two sub-trees.

It also defines a function called Tree that takes a type argument and returns a
type. For example Tree(Int) is a tree of Int values and Tree(Str) is a tree of
Str values. Tree is not a type, but is a function that returns a type.

Here we create a Tree(Str):

    let x = Node(Leaf("a"), Node(Leaf("b"), Leaf("c")))

This produces the following tree where "*" indicate Nodes:

:     b   c
:      \ /
:   a   *
:    \ /
:     *

To use a union type, we use the "case" keyword to match with each of the
functions that were used to create the tree. Here's a function to count the leaf
nodes in our tree.

    let count(t) = case t of
        Leaf(_) : 1 
        Node(left, right) : count(left) + count(right)

    count(x)

This prints "3" for the tree we created above.


IF .. THEN .. ELIF .. ELSE

    let yy = (
        if a = 0 then 22
        elif b = 0 then 311
        elif c = a + b then 109
        else 85)
        * (if isOrange then 1 else 0)


LISTS

There is no build-in support for lists yet. Define lists using

    type List(a) = Nil | Cons(a, List(a))

Empty list.

    Nil

Finite lists.

    Cons(1, Nil)
    Cons(1, Cons(2, Cons(3, Nil)))

Infinite list of natural numbers.

    let natsFromWithSkip(n, skip) =
        Cons(n, natsFromWithSkip(n + skip, skip))

    let allNatsFrom(n) =
        natsFromWithSkip(n, 1)

    let allNats = allNatsFrom(0)

List item extraction:

    type Maybe(a) = Nothing | Just(a)

    let head(list) =
        case list of
            Cons(a, _) : Just(a)
            else Nothing

Odd numbers 5 through 99:

    let takeWhile(pred, list) =
        case list of
            Nil : Nil

Block comment in the middle of an expression.

            Cons(head, tail) :
                if pred(head) then
                    Cons(head, takeWhile(pred, tail))
                else
                    Nil

    takeWhile(af(n) = n < 100, natsFromWithSkip(5, 2))

Left-associative and right-associative accumulation:

    let foldl(op, zero, list) =
        case list of
            Nil : zero
            Cons(x, rest) : foldl(op, op(zero, x), rest)

    let foldr(op, zero, list) =
        case list of
            Nil : zero
            Cons(x, rest) : op(x, foldr(op, zero, rest))

More complicated data structures can be deconstructed directly in "case"
statements, like shown below.

    let all2nds(list) =
        case list of
            Nil : Nil
            Cons(Pair(_, b), rest) : Cons(b, all2nds(rest))

    all2nds(Cons(Pair(2, 4), Cons(Pair(3, 9), Nil)))


FUNCTIONS AS VALUES, ALSO LAMBDAS 𝑎.𝑘.𝑎. ANONYMOUS FUNCTIONS

Functions are values in and of themselves, and can be passed as arguments to
other functions. Here's a function that accepts a function as input and applies
it to each value in a list to produce a new list.

    let map(func, list) = case list of
        Nil : Nil
        Cons(head, tail) : Cons(func(head), map(func, tail))

We can use this to apply our "square" function to each item in the list.

    let natsFromTo(from, to) =
        if from > to then 
            Nil 
        else 
            Cons(from, natsFromTo(from + 1, to))

    map(square, natsFromTo(1, 5))

This produces Cons(1, Cons(4, Cons(9, Cons(16, Cons(25, Nil))))). We can also
supply a function directly in the call to map without defining a named function
first.

    map(af(x) = x², natsFromTo(1, 5))

An unnamed function like this is called a lambda function, named after Lambda
Calculus.


CUSTOM OPERATORS

Concatenate two lists.

    let [😀](list₁, list₂) =
        case list₁ of
            Nil : list₂
            Cons(head, tail) : Cons(head, tail 😀 list₂)

    Cons(1, Cons(2, Nil)) 😀 Cons(3, Cons(4, Cons(5, Nil)))

Final comment.
/* Use, for example, at https://www.bottlecaps.de/rr/ui */

Atom ::= Atom '(' Expr (',' Expr)* ')' | Atom SUPERSCRIPT | '[' IntSeq ']' | NAT | STRING | BOOL | '[' OPERATOR ']' | '(' Expr ')' | IDENTIFIER
Case ::= Pattern ':' Expr
Cases ::= 'case' Expr 'of' (Case)+ ('else' Expr)?
ElseIf ::= 'elif' Expr 'then' Expr
Expr ::= Unatom (Term)* | TypeDecl | LetDecl | Cases | IfThen | 'af' '(' Lexpr ')' '=' Expr | '{' Expr '}'
IfThen ::= 'if' Expr 'then' Expr (ElseIf)* 'else' Expr
IntSeq ::= (Range (',' Range)*)?
LetDecl ::= 'let' Lexpr '=' Expr ('in' Expr)?
Lexpr ::= LexprName ('(' Lexpr (',' Lexpr)* ')')?
LexprName ::= IDENTIFIER | OPERATOR
MonoType ::= Lexpr (('->' | '→') Lexpr)*
Pattern ::= IDENTIFIER ('(' Pattern (',' Pattern)* ')')? | NAT | STRING | BOOL
PolyType ::= (('forall' | '∀') (IDENTIFIER)+ ',')? MonoType ('|' MonoType)*
Range ::= NAT '..' (NAT)? ('by' NAT)?
Term ::= OPERATOR Unatom
TypeDecl ::= 'type' IDENTIFIER ('(' IDENTIFIER (',' IDENTIFIER)* ')')? '=' PolyType Expr
Unatom ::= (OPERATOR)? Atom

typ ::= (('∀' | 'forall') ID+ ',')? monoType
monoType::= productType (('→' | '->') productType)*
productType ::= typeAtom (('×' | '*') typeAtom)*
typeAtom ::= ID monoType* | '(' monoType ')'
typeDecl ::= 'type' ID '=' typ '.'
expr ::= (assign | typeDecl)* atom ('(' expr (',' expr)* ')')?
assign ::= 'let' ID '=' expr
atom ::= NAT | STRING | '`' OPERATOR '`' | lambda | '(' expr ')' | ID
typedVar ::= ID ':' typ
lambda ::= '(' typedVar (',' typedVar)* ')' '=' expr

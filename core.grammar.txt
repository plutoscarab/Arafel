type ::= (('∀' | 'forall') ID+ '.')? monoType
monoType::= productType (('→' | '->') productType)*
productType ::= typeAtom (('×' | '*') typeAtom)*
typeAtom  ::= ID monoType* | '(' monoType ')'
expr ::= atom ('(' expr (',' expr)* ')')?
atom ::= ID | LITERAL | '`' OPERATOR '`' | '(' expr ')' | lambda | 'let' typedVar '=' expr 'in' expr | match
typedVar ::= ID ':' type
lambda ::= '(' typedVar (',' typedVar)* ')' '=' expr
match ::= 'case' expr 'of' (pattern ('→' | '->') expr)+
pattern ::= LITERAL | ID ('(' ID (',' ID)* ')')?

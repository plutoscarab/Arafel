
Maybe data type.

    type Maybe(t) = Nothing | Just(t)

    maybe(default, selector, m) = case m of
        Nothing -> default
        Just(x) -> selector(x)

    fmap(selector, m) = maybe(Nothing, selector, m)


Either data type.

    type Either(t, u) = Left(t) | Right(u)

    either(leftSelector, rightSelector, e) = case e of
        Left(x) -> leftSelector(x)
        Right(x) -> rightSelector(x)

    fmap(selector, e) = either((x) = Left(x), selector, e)


Ordering data type.

    type Ordering = LT | EQ | GT


Tuple functions.

    fst(p) = case p of
        a, b -> a

    snd(p) = case p of
        a, b -> b

Convert a function that takes a pair into a function that takes two separate arguments.

    curry(f) = (a, b) = f((a, b))

    example1(pair) = fst(pair) + snd(pair)
    let example2 = curry(example1)
    let x2 = example2(5, 10)

Convert a function of two arguments into a function that takes one pair argument.

    uncurry(f) = (p) = case p of
        a, b -> f(a, b)

    example3(a, b) = a + b
    let example4 = uncurry(example3)
    let x4 = example4((5, 10))


Lists

    map(f, m) = case m of
        [] -> []
        x:xs -> f(x) : map(f, xs)

    agg(op, zero, list) = case list of
        [] -> zero
        x:xs -> agg(op, op(zero, x), xs)

    sum(list) = agg(`+`, 0, list)

    prod(list) = agg(`*`, 1, list)

    take(n, list) = if (n < 1) then [] else 
        case list of
            [] -> []
            x:xs -> x : take(n - 1, xs)

    skip(n, list) = case list of
        [] -> []
        x:xs -> if n < 1 then [] else x : skip(n - 1, xs)

    repeat(x, n) = case of
        n < 1 -> [] 
        else x : repeat(x, n - 1)

    isEmpty(list) = case list of
        [] -> true
        _ -> false

    cycle(list) =
        cycle_(list) = list ++ cycle_(list)
        case list of
            [] -> []
            _ -> cycle_(list)

    tail(list) = case list of
        [] -> []
        x:xs -> xs

    head(list) = case list of
        [] -> Nothing
        x:xs -> Just(x)

    len(list) =
        len(n, list) = case list of
            [] -> n
            x:xs -> len(n + 1, xs)
        len(0, list)

    
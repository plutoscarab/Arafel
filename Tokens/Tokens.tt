<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using System.Collections.Generic;
<#
    Empty("End");
    Characters("LParen", "RParen", "LBrack", "RBrack", "Comma");
    Strings("Char", "Id", "Keyword", "Operator", "String", "Bool", "Nat", "Unknown", "Super", "Decimal");
#>

internal static class Tokens
{
    public static readonly Dictionary<string, TokenParser> Lookup = new()
    {
<# foreach (var (type, arity) in types) { #>        { "<#= type.ToUpperInvariant() #>", TokenParsers.Expect<<#= type #>Token>() },
<# } #>
    };
}
<#+
    System.Collections.Generic.List<(string, int)> types = new();

    void Empty(params string[] ids)
    {
        types.AddRange(ids.Select(id => (id, 0)));

        foreach (var id in ids)
        {
#>
internal sealed partial record <#= id #>Token() : Token(Cursor.Empty, Cursor.Empty)
{
    public static readonly <#= id #>Token Instance = new EndToken();
}

<#+
        }
    }

    void Characters(params string[] ids)
    {
        types.AddRange(ids.Select(id => (id, 1)));
        
        foreach (var id in ids)
        {
#>
internal sealed partial record <#= id #>Token(Cursor Start) 
: Token(Start, Start.Next())
{
    public override string ToString() => Text;
}

<#+
        }
    }

    void Strings(params string[] ids)
    {
        types.AddRange(ids.Select(id => (id, 2)));
        
        foreach (var id in ids)
        {
#>
internal sealed partial record <#= id #>Token(Cursor Start, Cursor Next) 
: Token(Start, Next)
{
    public override string ToString() => Text;
}

<#+
        }
    }
#>
monoType::= productType (('→' | '->') productType)*
productType ::= typeAtom (('×' | '*') typeAtom)*
typeAtom ::= ID monoType* | '(' monoType ')'
tyƿe ::= (('∀' | 'forall') ID+ ',')? monoType
typeDecl ::= 'type' ID '=' tyƿe '.'
expr ::= (assign | typeDecl)* atom ('(' expr (',' expr)* ')')?
assign ::= 'let' ID ('(' ID (',' ID)* ')')? '=' expr
atom ::= NAT | STRING | '`' OPERATOR '`' | lambda | '(' expr ')' | ID
lambda ::= '(' ID (',' ID)* ')' '=' expr

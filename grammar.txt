lexpr ::= ID ('(' lexpr (',' lexpr)* ')')?
monoType::= lexpr (('→' | '->') lexpr)*
tyƿe ::= (('∀' | 'forall') ID+ ',')? monoType
typeDecl ::= 'type' ID '=' tyƿe '.'
expr ::= (assign | typeDecl)* atom args? SUPERSCRIPT?
args ::= '(' expr (',' expr)* ')'
assign ::= 'let' lexpr '=' expr
atom ::= NAT | STRING | OPERATOR | lambda | parens | ID | cases | ifthen
parens ::= '(' expr ')'
lambda ::= '(' lexpr (',' lexpr)* ')' '=' expr
cases ::= 'case' expr (pattern '->' expr)+ ('otherwise' expr)?
pattern ::= ID ('(' pattern (',' pattern)* ')')? | NAT | STRING
ifthen ::= 'if' expr 'then' expr 'else' expr